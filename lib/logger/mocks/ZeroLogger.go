// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import zerolog "github.com/rs/zerolog"

// ZeroLogger is an autogenerated mock type for the ZeroLogger type
type ZeroLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields:
func (_m *ZeroLogger) Debug() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *ZeroLogger) Error() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *ZeroLogger) Info() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Warn provides a mock function with given fields:
func (_m *ZeroLogger) Warn() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// With provides a mock function with given fields:
func (_m *ZeroLogger) With() zerolog.Context {
	ret := _m.Called()

	var r0 zerolog.Context
	if rf, ok := ret.Get(0).(func() zerolog.Context); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zerolog.Context)
	}

	return r0
}
