// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	job "github.com/EurosportDigital/global-transcoding-platform/lib/repository/job"
	mock "github.com/stretchr/testify/mock"

	model "github.com/EurosportDigital/global-transcoding-platform/model"
)

// JobRepository is an autogenerated mock type for the JobRepository type
type JobRepository struct {
	mock.Mock
}

// All provides a mock function with given fields: filters, pagination
func (_m *JobRepository) All(filters *job.JobFilter, pagination *job.JobPagination) (*job.JobPaginationResult, error) {
	ret := _m.Called(filters, pagination)

	var r0 *job.JobPaginationResult
	if rf, ok := ret.Get(0).(func(*job.JobFilter, *job.JobPagination) *job.JobPaginationResult); ok {
		r0 = rf(filters, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*job.JobPaginationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*job.JobFilter, *job.JobPagination) error); ok {
		r1 = rf(filters, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *JobRepository) Create(_a0 *model.Job) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Job) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *JobRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *JobRepository) Get(id int) (*model.Job, error) {
	ret := _m.Called(id)

	var r0 *model.Job
	if rf, ok := ret.Get(0).(func(int) *model.Job); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *JobRepository) Update(_a0 *model.Job) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Job) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
