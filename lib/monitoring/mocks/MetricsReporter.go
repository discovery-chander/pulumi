// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	time "time"

	monitoring "github.com/EurosportDigital/global-transcoding-platform/lib/monitoring"
	mock "github.com/stretchr/testify/mock"
)

// MetricsReporter is an autogenerated mock type for the MetricsReporter type
type MetricsReporter struct {
	mock.Mock
}

// Count provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Count(name string, value int64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Decrement provides a mock function with given fields: name, tags
func (_m *MetricsReporter) Decrement(name string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Distribution provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Distribution(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Gauge provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Gauge(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Histogram provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Histogram(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Increment provides a mock function with given fields: name, tags
func (_m *MetricsReporter) Increment(name string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Set provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Set(name string, value string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Time provides a mock function with given fields: name, value, tags
func (_m *MetricsReporter) Time(name string, value time.Duration, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TimeSince provides a mock function with given fields: name, startTime, tags
func (_m *MetricsReporter) TimeSince(name string, startTime time.Time, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, startTime)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
