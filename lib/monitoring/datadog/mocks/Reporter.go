// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	time "time"

	monitoring "github.com/EurosportDigital/global-transcoding-platform/lib/monitoring"
	mock "github.com/stretchr/testify/mock"
)

// Reporter is an autogenerated mock type for the Reporter type
type Reporter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Reporter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: name, value, tags
func (_m *Reporter) Count(name string, value int64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Decrement provides a mock function with given fields: name, tags
func (_m *Reporter) Decrement(name string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Distribution provides a mock function with given fields: name, value, tags
func (_m *Reporter) Distribution(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Emit provides a mock function with given fields: e
func (_m *Reporter) Emit(e *monitoring.Event) {
	_m.Called(e)
}

// EmitSimple provides a mock function with given fields: title, description
func (_m *Reporter) EmitSimple(title string, description string) {
	_m.Called(title, description)
}

// Gauge provides a mock function with given fields: name, value, tags
func (_m *Reporter) Gauge(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Histogram provides a mock function with given fields: name, value, tags
func (_m *Reporter) Histogram(name string, value float64, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Increment provides a mock function with given fields: name, tags
func (_m *Reporter) Increment(name string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Report provides a mock function with given fields: hc
func (_m *Reporter) Report(hc *monitoring.HealthCheck) {
	_m.Called(hc)
}

// ReportSimple provides a mock function with given fields: name, status
func (_m *Reporter) ReportSimple(name string, status monitoring.HealthCheckStatus) {
	_m.Called(name, status)
}

// Set provides a mock function with given fields: name, value, tags
func (_m *Reporter) Set(name string, value string, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Time provides a mock function with given fields: name, value, tags
func (_m *Reporter) Time(name string, value time.Duration, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// TimeSince provides a mock function with given fields: name, startTime, tags
func (_m *Reporter) TimeSince(name string, startTime time.Time, tags ...monitoring.Tag) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, startTime)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
