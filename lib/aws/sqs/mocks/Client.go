// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import sqs "github.com/EurosportDigital/global-transcoding-platform/lib/aws/sqs"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DeleteMessages provides a mock function with given fields: messages
func (_m *Client) DeleteMessages(messages []sqs.Message) error {
	ret := _m.Called(messages)

	var r0 error
	if rf, ok := ret.Get(0).(func([]sqs.Message) error); ok {
		r0 = rf(messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiveMessages provides a mock function with given fields:
func (_m *Client) ReceiveMessages() ([]sqs.Message, error) {
	ret := _m.Called()

	var r0 []sqs.Message
	if rf, ok := ret.Get(0).(func() []sqs.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqs.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: _a0
func (_m *Client) SendMessage(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
